                                        GitHub

何为版本控制
    版本控制是一种记录文件内容变化，以便将来查阅特定版本修订情况的系统。
    版本控制其实最重要的是可以记录文件修改历史记录，从而让用户能够查看历史版本，方便版本切换。

版本控制工具
    集中式版本控制工具
        CVS、SVN(Subversion)、VSs......
        集中化的版本控制系统诸如CVS、SVN等，都有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。多年以来，这已成为版本控制系统的标准做法。
        这种做法带来了许多好处,每个人都可以在一定程度上看到项目中的其他人正在做些什么。而管理员也可以轻松掌控每个开发者的权限，并且管理一个集中化的版本控制系统，要远比在各个客户端上维护本地数据库来得轻松容易。
        事分两面，有好有坏。这么做显而易见的缺点是中央服务器的单点故障。如果服务器宕机一小时，那么在这一小时内，谁都无法提交更新，也就无法协同工作。

    分布式版本控制工具
        Git、Mercurial、Bazaar、Darcs......
        像Git这种分布式版本控制工具，客户端提取的不是最新版本的文件快照，而是把代码仓库完整地镜像下来（本地库)。
        这样任何一处协同工作用的文件发生故障，事后都可以用其他客户端的本地仓库进行恢复。因为每个客户端的每一次文件提取操作，实际上都是一次对整个文件仓库的完整备份。
        分布式的版本控制系统出现之后,解决了集中式版本控制系统的缺陷:
            1.服务器断网的情况下也可以进行开发（因为版本控制是在本地进行的)
            2.每个客户端保存的也都是整个完整的项目(包含历史记录,更加安全）

工作机制
    首先在工作区写代码
    写完之后' git add '把代码添加到暂存区 做一个临时存储
    最后使用' git commit '把上传到本地库 并生成对应历史版本
        本地库中的代码时无法删除无法回退的，
    可以使用' push '命令把本地库的代码推送到远程库

git和代码托管中心
    代码托管中心是基于网络服务器的远程代码仓库，一般我们简单称为远程库。
    局域网:
        GitLab，搭建的GitLab只可以在局域网内使用
    互联网:
        GitHub(外网)
        Gitee码云（国内网站）


命令
    git config --global user.email 1726242034@qq.com    设置用户邮箱
    git config --global user.name xuJunNan             设置用户姓名

    初始化本地库
        git想要管理当前目录 必须获取当前目录的使用权 使用' git init '命令获取
        比如想要管理' D:\BaiduNetdiskDownload '目录, 就需要进入到此目录 然后使用' git init '获取此目录的使用权(隐藏文件需要使用ll -a查看)

    获取当前状态
        git status
        此命令会返回三行数据
            On branch master
                当前所在的分支

            No commits yet
                当前分支所提交的信息(在暂存区存储的文件 没有则不显示)
                在暂存区中的文件可以提交到本地库 使用' git commit -m "日志信息" 文件名 '命令提交
                提交成功后可以使用' git reflog '命令查看引用日志的信息
                    d1722e5 (HEAD -> master) HEAD@{0}: commit: hel V2 commit
                    版本号   当前使用的master主版本
                使用' git reset --hard 版本号 '穿梭到指定的版本

            Untracked files: (use "git add <file>..." to include in what will be committed)
                当前文件夹中未提交的文件(在工作区存储的文件)，
                使用' git add 文件名 '追踪文件 即把文件上传到暂存区 做一个临时存储
                    上传到暂存区完成之后 即可在' No commits yet '下面看到此文件

                使用' git rm --cached 文件名 '删除在暂存区的文件

                使用' git commit -m "日志信息" 文件名 '把暂存区的文件提交到本地库

                使用' git reflog '查看引用日志信息
                使用' git flog '查看引用日志的详细信息


什么是分支
    在版本控制过程中，同时推进多个任务，为每个任务，我们就可以创建每个任务的单独分支。使用分支意味着程序员可以把自己的工作从开发主线上分离开来，
    开发自己分支的时候，不会影响主线分支的运行。对于初学者而言，分支可以简单理解为副本，一个分支就是一个单独的副本。(分支底层其实也是指针的引用)

    ' git branch -v '查看所有分支
    ' git branch 分支名称 '新建分支
    ' git checkout 分支名称 '切换分支
    ' git merge 分支名称 '把指定分支合并到当前分支上

文件冲突
    当多个分支同时操作一个文件 并且都提交到了本地库之后进行合并，git就无法确定具体要保存哪一个分支的文件
    在合并分支的时候就需要手动进入到文件中以确定要怎么合并
    然后使用' git commit -m "版本信息"'来合并(不能加文件名 否则报错)


------------------------------------------------------------------------------------------------------------------------------------------------------

远程库
    本地库中的代码可以上传到远程库 在远程库中的代码可以被所有用户拉取

    ' git remote -v '查看所有远程库
    ' git remote add 远程库别名 远程库url '添加远程库
    ' git push 远程库别名 分支名称 '把本地库的代码推送到远程库
    ' git pull 远程库别名 分支名称 '把远程库的代码拉取到本地库
    ' git clone 远程库url '克隆远程库到本地(克隆操作会自动进行拉取代码、初始化本地仓库、创建别名操作)


ssh免密登录
    进入到' C:\Users\xu172 '目录下 在git命令行界面输入' ssh-keyger -t rsa -C 邮箱 '创建ssh文件夹
    ssh文件夹内的'id_rsa.pub'文件就是ssh的公钥 把这个公钥复制到github网站即可
    在github中点击头像下面的Settings, 然后点击SSH and GPG keys即可添加ssh公钥


------------------------------------------------------------------------------------------------------------------------------------------------------

idea集成git
    idea需要先把idea的目录初始文件忽略掉 因为这些文件与项目无关 不参与服务器上部署运行。
    在idea中打开: File | Settings | Version Control | GitHub, 添加github账户。
        使用账号密码登录很难成功 可以使用口令登录 在web端的Settings-->DeveloperSettings内即可生成口令
    在工具栏上点击Git 追踪文件，之后右键项目-->Git-->CommitDirectory即可提交文件到本地库。
    在工具栏上点击Git--Branches即可创建新的分支。

ssh免密登录进行push
    点击导航栏的Git-->Push-->master分支上点击'define remote' 自定义一个远程连接方式 把远程库的ssh链接复制过来即可


    注意: push是将本地库代码推送到远程库，如果本地库代码跟远程库代码版本不一致，push的操作是会被拒绝的。也就是说，要想push成功，
    一定要保证本地库的版本要比远程库的版本高!因此一个成熟的程序员在动手改本地代码之前，一定会先检查下远程库跟本地代码的区别!
    如果本地的代码版本已经落后，切记要先pull 拉取一下远程库的代码，将本地代码更新到最新以后，然后再修改，提交，推送!










