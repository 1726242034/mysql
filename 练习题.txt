course: 课程   scores: 分数   student: 学生   teacher: 老师
-- ========================================================================

drop TABLE if EXISTS student;
CREATE TABLE student (
id INT(10) PRIMARY key,
name VARCHAR (10),
age INT (10) NOT NULL,
gander varchar(2)
);
drop TABLE if EXISTS course;
CREATE TABLE course (
id INT (10) PRIMARY key,
name VARCHAR (10) ,
t_id INT (10)
) ;
drop TABLE if EXISTS teacher;
CREATE TABLE teacher(
id INT (10) PRIMARY key,
name VARCHAR (10)
);
drop TABLE if EXISTS scores;
CREATE TABLE scores(
s_id INT ,
score INT (10),
c_id INT (10) ,
PRIMARY key(s_id,c_id)
);

insert into student (id,name,age,gander)VALUES(1,'白杰',19,'男'),(2,'连宇栋',19,'男'),(3,'邸志伟',24,'男'),(4,'李兴',11,'男'),
(5,'张琪',18,'男'),(6,'武三水',18,'女'),(7,'张志伟',16,'男'),(8,'康永亮',23,'男'),(9,'杨涛瑞',22,'女'),(10,'王杰',21,'男');

insert into course (id,name,t_id)VALUES(1,'数学',1),(2,'语文',2),(3,'c++',3),(4,'java',4),(5,'php',null);

insert into teacher (id,name)VALUES(1,'张楠'),(2,'老孙'),(3,'薇薇姐'),(4,'磊磊哥'),(5,'大微姐');

insert into scores (s_id,score,c_id)VALUES(1,80,1),(1,56,2),(1,95,3),(1,30,4),(1,76,5),(2,35,1),(2,86,2),(2,45,3),(2,94,4),
(2,79,5),(3,65,2),(3,85,3),(3,37,4),(3,79,5),(4,66,1),(4,39,2),(4,85,3),(5,66,2),(5,89,3),(5,74,4),(6,80,1),(6,56,2),(6,95,3),(6,30,4),
(6,76,5),(7,35,1),(7,86,2),(7,45,3),(7,94,4),(7,79,5),(8,65,2),(8,85,3),(8,37,4),(8,79,5),(9,66,1),(9,39,2),(9,85,3),(9,79,5),(10,66,2),(10,89,3),(10,74,4),(10,79,5);


-- ========================================================================

查询‘01’号学生的姓名和各科成绩。
    select stu.name '学生姓名',c.name '课程名称',s.score '成绩'
    from course c inner join scores s on c.id=s.c_id
    inner join student stu on stu.id = s.s_id
    where stu.id=1;

2、查询各个学科的平均成绩，最高成绩。
    select c.name '课程',avg(s.score) '平均成绩', max(s.score) '最高值'
    from course c inner join scores s
    on c.id = s.c_id
    group by c.name

3、查询每个同学的最高成绩及科目名称。
    -- 首先使用子查询把最高的成绩算出来然后分组删除多余数据。
    -- 然后拿scores成绩表的成绩最高成绩的数据
        (使用内连接算出的最高分和成绩表的分数做比较 如果相等就拿出来，因为需要成绩表中的s_id和c_id来关联数据,
        查出来的数据会出问题 因为只是比较的分数所以会产生笛卡尔积，所以还需要拿内连接的s_id和s_id关联)
    -- 拿到scores分数表的结果后 用这个结果中的s_id c_id和student course表关联绑定
    select stu.id 'ID', stu.name '姓名', s.score '成绩', c.name '课程'
    from (select s_id,max(score) max from scores group by s_id) test
    inner join scores s on s.score = test.max and test.s_id = s.s_id
    inner join student stu on stu.id = s.s_id
    inner join course c on c.id = s.c_id
    order by stu.id

    select stu.id 'ID', stu.name '姓名', s.score '成绩', c.name '课程'
    from (select s_id,max(score) max from scores group by s_id) test,scores s,student stu, course c
    where (s.score = test.max and test.s_id = s.s_id) and stu.id = s.s_id and c.id = s.c_id
    order by stu.id


4、查询所有姓张的同学的各科成绩。
    select stu.name '姓名',s.score '成绩',c.name '课程名称'
    from student stu, scores s, course c
    where stu.id = s.s_id and s.c_id = c.id and stu.name like '张%'
    order by stu.name


5、查询每个课程最高分的同学信息。
    -- 暂时不会
        select s.s_id, s.c_id, s.score
        from (select c_id,max(score) scoreMax from scores group by c_id) sm
        inner join scores s on sm.scoreMax = s.score and sm.c_id = s.c_id


6、查询名字中含有“张”和‘李’字的学生信息和各科成绩。
    select stu.name '姓名',stu.age '年龄',stu.gander '性别',s.score '分数',c.name '课程'
    from student stu
    inner join scores s on s.s_id = stu.id
    inner join course c on s.c_id = c.id
    where stu.name like '张%' or stu.name like '李%'
    order by stu.id


7、查询平均成绩及格的同学的信息。
    -- 使用子查询查询出平均成绩及格的同学，再连接学生表查询学生的信息
    select stu.id, stu.name, stu.age, stu.gander,test.scoreAvg '平均成绩及格了的同学'
    from (
        select s_id,avg(score) scoreAvg
        from scores
        group by s_id
        having avg(score) > 60
    ) test
    inner join student stu on test.s_id = stu.id


8、将学生按照总分数进行排名。
    select stu.name,test.scoreSum '总成绩'
    from (
        select *,sum(score) scoreSum
        from scores
        group by s_id
    ) test
    inner join student stu on stu.id = test.s_id
    group by test.scoreSum


9、查询数学成绩的最高分、最低分、平均分。
    select c.name,max(s.score) '最高分',min(s.score) '最低分',avg(s.score) '平均分'
    from scores s
    inner join course c on s.c_id = c.id
    where c.name = '数学'


10、将各科目按照平均分排序。
    select c.name,avg(s.score) '平均分'
    from scores s
    inner join course c on c.id = s.c_id
    group by s.c_id
    order by '平均分'


11、查询老师的信息和他所带科目的平均分。
    select t.name '教师',c.name '课程',avg(s.score) '老师所教的课程的平均分'
    from teacher t
    inner join course c on c.t_id = t.id
    inner join scores s on c.t_id = s.c_id
    group by t.name


12、查询被“张楠”和‘‘老孙’叫的课程的最高分和平均分。
    select t.name '老师',c.name '课程',max(s.score) '最高分',avg(s.score) '平均分'
    from teacher t
    inner join course c on t.id = c.t_id
    inner join scores s on s.c_id = c.id
    where t.name = '张楠' or t.name = '老孙'
    group by s.c_id


13、查询查询每个同学的最好成绩的科目名称。
    -- 先使用子查询查询每个同学的最高得分，使用这个结果集的最高得分来匹配scores成绩表 获取成绩表中学生和科目的外键
    select test.name '姓名',c.name '课程名',test.scoreMax '最高得分'
    from (
        select s.s_id,stu.name,max(s.score) scoreMax
        from scores s
        inner join student stu on s.s_id = stu.id
        group by stu.name
    ) test
    inner join scores s on test.scoreMax = s.score and test.s_id = s.s_id
    inner join course c on s.c_id = c.id
    order by test.scoreMax


14、查询所有学生的课程及分数。
    select stu.name '学生',c.name '课程',s.score '成绩'
    from student stu
    inner join scores s on s.s_id = stu.id
    inner join course c on s.c_id = c.id
    order by stu.id


15、查询课程编号为01且课程成绩在80分以上的学生的学号和姓名
    select stu.id '学号',stu.name '姓名',s.score '成绩(大于80分的)'
    from course c
    inner join scores s on c.id = s.c_id
    inner join student stu on stu.id = s.s_id
    where c.id = 1 and s.score > 80


16、查询平均成绩大于等于70的所有学生的学号、姓名和平均成绩。 **
    select stu.id '学号',stu.name '姓名',test.scoreAvg '平均成绩'
    from (
        select *,avg(s.score) scoreAvg
        from scores s
        group by s.s_id
        having avg(s.score) > 70
    ) test
    inner join student stu on test.s_id = stu.id
    order by stu.id


17、查询有不及格课程的同学信息。 **
    select stu.name '姓名',stu.age '年龄',stu.gander '性别',c.name '不及格的课程',test.score '分数'
    from (
        select * from scores s
        where s.score < 60
    ) test
    inner join student stu on test.s_id = stu.id
    inner join course c on test.c_id = c.id
    order by stu.id


18、求每门课程的学生人数。
    select c.name '课程', test.numberCount '人数'
    from (
        select *, count(s.c_id) numberCount
        from scores s
        group by s.c_id
    ) test
    inner join course c on test.c_id = c.id


19、查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 。
    select c.id '课程编号', c.name '课程名', test.scoreAvg '平均成绩'
    from (
    	select s.c_id,avg(s.score) scoreAvg
    	from scores s
    	group by s.c_id
    ) test
    inner join course c on test.c_id = c.id
    order by test.scoreAvg,c.id


20、查询平均成绩大于等于70分的同学的学生编号和学生姓名和平均成绩。
    select stu.id '学生编号',stu.name '学生姓名',test.scoresAvg '平均成绩'
    from (
        select s.s_id,avg(s.score) scoresAvg
        from scores s
        group by s.s_id
        having avg(s.score) >= 70
    ) test, student stu
    where test.s_id = stu.id


21、查询有一门课程成绩在90分以上的学生信息。
    select stu.name '姓名', c.name '课程名称', test.score '成绩'
    from (
        select * from scores where score > 90
    ) test, student stu, course c
    where test.s_id = stu.id and test.c_id = c.id


22、查询出只有三门课程的全部学生的学号和姓名。
    select stu.id,stu.name '姓名', count(s.c_id) '课程'
    from scores s,student stu
    where s.s_id = stu.id
    group by s.s_id
    having count(s.c_id) = 3


23、查询有不及格课程的课程信息。
    select stu.name '姓名', c.name '课程名', s.score '成绩(不及格的)'
    from scores s, course c, student stu
    where s.score < 60 and s.c_id = c.id and stu.id = s.s_id
    order by stu.id


24、检索至少选修四门课程的学生学号。
    select stu.id '学号',stu.name '姓名', count(s.c_id) '选修课程数'
    from scores s, student stu
    where s.s_id = stu.id
    group by s.s_id
    having count(s.c_id) >= 4


25、查询没有学全所有课程的同学的信息。
    select test.s_id '学号', stu.name '姓名', test.courseCount '实修课程数'
    from (
        select s_id,count(s_id) courseCount
        from scores
        group by s_id
    ) test, (select count(id) countId from course) test2, student stu
    where stu.id = test.s_id
    and test.courseCount != test2.countId

26、查询学全所有课程的同学的信息。
    把25题最后的and条件修改一下即可


27、 查询各学生都选了多少门课。
    select stu.id, stu.name '姓名', test.courseCount '课程数'
    from (
        select *,count(s.c_id) courseCount
        from scores s
        group by s.s_id
    ) test, student stu
    where test.s_id = stu.id


28、查询课程名称为”java”，且分数低于60的学生姓名和分数
    select stu.id, stu.name '姓名', s.score '成绩', c.name '课程名'
    from course c,scores s,student stu
    where s.c_id = c.id and s.s_id = stu.id and c.name = 'java' and s.score < 60


29、查询学过”张楠”老师授课的同学的信息
    select s.s_id '学号', stu.name '姓名', c.name '科目', t.name '授课老师'
    from scores s, course c, student stu, teacher t
    where s.c_id = c.t_id and s.c_id = 1 and s.s_id = stu.id and c.t_id = t.id


30、查询没学过”张楠”老师授课的同学的信息
    上面的where条件改一下即可

