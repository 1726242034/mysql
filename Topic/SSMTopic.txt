为什么要使用 spring？
    spring 提供 ioc 技术，容器会帮你管理依赖的对象，从而不需要自己创建和管理依赖对象了，更轻松的实现了程序的解耦。
    spring 提供了事务支持，使得事务操作变的更加方便。
    spring 提供了面向切片编程，这样可以更方便的处理某一类的问题。
    更方便的框架集成，spring 可以很方便的集成其他框架，比如 MyBatis、hibernate 等。

aop
    aop 是面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。
    简单来说就是统一处理某一“切面”（类）的问题的编程思想，比如统一处理日志、异常等。

ioc
    ioc：Inversion of Control（控制反转）是 spring 的核心，对于 spring 框架来说，就是由 spring 来负责控制对象的生命周期和对象间的关系。
    简单来说，控制指的是当前对象对内部成员的控制权；控制反转指的是，这种控制权不由当前对象管理了，由其他（类,第三方容器）来管理。

spring 有哪些主要模块？
    spring core：框架的最基础部分，提供 ioc 和依赖注入特性。
    spring context：构建于 core 封装包基础上的 context 封装包，提供了一种框架式的对象访问方法。
    spring dao：Data Access Object 提供了JDBC的抽象层。
    spring aop：提供了面向切面的编程实现，让你可以自定义拦截器、切点等。
    spring Web：提供了针对 Web 开发的集成特性，例如文件上传，利用 servlet listeners 进行 ioc 容器初始化和针对 Web 的 ApplicationContext。
    spring Web mvc：spring 中的 mvc 封装包提供了 Web 应用的 Model-View-Controller（MVC）的实现。

spring 中的 bean 是线程安全的吗？
    spring 中的 bean 默认是单例模式，spring 框架并没有对单例 bean 进行多线程的封装处理。
    实际上大部分时候 spring bean 无状态的（比如 dao 类），所有某种程度上来说 bean 也是安全的，但如果 bean 有状态的话（比如 view model 对象），
    那就要开发者自己去保证线程安全了，最简单的就是改变 bean 的作用域，把“singleton”变更为“prototype”，这样请求 bean 相当于 new Bean()了，所以就可以保证线程安全了。
        有状态就是有数据存储功能。
        无状态就是不会保存数据。

    修改spring的Bean的作用域
        <bean id="accountDao" class="com.mt.dao.impl.AccountDaoImpl" scope="prototype"></bean>

spring 支持几种 bean 的作用域？
    spring 支持 5 种作用域，如下：
        singleton：spring ioc 容器中只存在一个 bean 实例，bean 以单例模式存在，是系统默认值；
        prototype：每次从容器调用 bean 时都会创建一个新的示例，既每次 getBean()相当于执行 new Bean()操作；
            注意： 使用 prototype 作用域需要慎重的思考，因为频繁创建和销毁 bean 会带来很大的性能开销。

        Web 环境下的作用域：
            request：每次 http 请求都会创建一个 bean；
            session：同一个 http session 共享一个 bean 实例；
            global-session：用于 portlet 容器，因为每个 portlet 有单独的 session，globalsession 提供一个全局性的 http session。

spring 自动装配 bean 有哪些方式？
    no：默认值，表示没有自动装配，应使用显式 bean 引用进行装配。
    byName：它根据 bean 的名称注入对象依赖项。
    byType：它根据类型注入对象依赖项。
    构造函数：通过构造函数来注入依赖项，需要设置大量的参数。
    autodetect：容器首先通过构造函数使用 autowire 装配，如果不能，则通过 byType 自动装配。

spring 事务实现方式有哪些？
    声明式事务：声明式事务也有两种实现方式，基于 xml 配置文件的方式和注解方式（在类上添加 @Transaction 注解）。
    编码方式：提供编码的形式管理和维护事务。

说一下 spring 的事务隔离？
    spring 有五大隔离级别，默认值为 ISOLATION_DEFAULT（使用数据库的设置），其他四个隔离级别和数据库的隔离级别一致：
    ISOLATION_DEFAULT：用底层数据库的设置隔离级别，数据库设置的是什么我就用什么；
    ISOLATION READ UNCOMMITTED：未提交读，最低隔离级别、事务未提交前，就可被其他事务读取（会出现幻读、脏读、不可重复读）；
    ISOLATION READ COMMITTED：提交读，一个事务提交后才能被其他事务读取到（会造成幻读、不可重复读），SQL server 的默认级别；
    ISOLATION REPEATABLE READ：可重复读，保证多次读取同一个数据时，其值都和事务开始时候的内容是一致，禁止读取到别的事务未提交的数据（会造成幻读），MySQL 的默认级别；
    ISOLATION_SERIALIZABLE：序列化，代价最高最可靠的隔离级别，该隔离级别能防止脏读、不可重复读、幻读。

    脏读：表示一个事务能够读取另一个事务中还未提交的数据。比如，某个事务尝试插入记录A，此时该事务还未提交，然后另一个事务尝试读取到了记录A。
    不可重复读：同一事务的其他实例在该实例处理期间可能会有新的commit, 所以同一select可能返回不同结果。
    幻读：指同一个事务内多次查询返回的结果集不一样。比如同一个事务 A 第一次查询时候有 n 条记录，但是第二次同等条件下查询却有 n+1 条记录，这就好像产生了幻觉。
        发生幻读的原因也是另外一个事务新增或者删除或者修改了第一个事务结果集里面的数据，同一个记录的数据内容被修改了，所有数据行的记录就变多或者变少了。


======================================================springMVC======================================================

spring mvc 运行流程
    spring mvc 先将用户请求发送给 DispatcherServlet。
    DispatcherServlet 查询一个或多个 HandlerMapping，HandlerMapping返回一个Handler链。
    DispatcherServlet 访问HandlerAdapter，由HandlerAdapter去执行处理器方法，Controller 进行业务逻辑处理后，会返回一个ModelAndView。
    DispatcherServlet 查询一个或多个 ViewResolver 视图解析器，找到 ModelAndView 对象指定的视图对象。
    View 视图对象负责渲染。
    渲染完毕后响应给用户

spring mvc 有哪些组件？
    DispatcherServlet：中央控制器
        用户请求到达前端控制器，它就相当于mvc模式中的c，dispatcherServlet是整个流程控制的中心，
        由它调用其它组件处理用户的请求，dispatcherServlet的存在降低了组件之间的耦合性。
        这玩意是核心，就是门卫传达室，一个请求进来先来传达室，然后一步步来处理问题。就是个servlet。

    HandlerMapping：处理器映射器
        HandlerMapping负责根据用户请求url找到Handler即处理器，springmvc提供了不同的映射器实现不同的映射方式，如配置文件方式，实现接口方式，注解方式等。
        这玩意就是个map，放了一堆数据，key是url，value是你对应的处理器。一个请求来了，调用一下mao.get(url)就知道哪个类的哪个方法处理这个请求了。
        当然实际上会将这个url多对应的拦截器，处理器都拿到。

    HandelAdapter：处理器适配器
        通过HandlerAdapter对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。
        这货会调用相应的方法，生成最终能够的modelAndView

    Controller 处理器
        处理用户请求的方法，编写后端的逻辑代码

    ModelAndView 模型和视图
        视图和模型是两个东西，既然存在ModelAndView就存在Model和View。

    ViewResolver：视图解析器
        View Resolver负责将处理结果生成View视图，View Resolver首先根据逻辑视图名解析成物理视图名即具体的页面地址，
        再生成View视图对象，最后对View进行渲染将处理结果通过页面展示给用户。
        这货就是解析modelAndView的。有个常用最简单的功能就是拼接字符串，给你加个前缀后缀，让你方便了很多，当然他们解析很多类型的视图。

@RequestMapping 的作用是什么？
    将http请求映射到相应的类/方法上。

@Autowired的作用是什么？
    @Autowired 它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作，通过@Autowired 的使用来消除 set/get 方法。



======================================================Spring Boot======================================================


什么是 spring boot？
    spring boot 是为 spring 服务的，是用来简化新 spring 应用的初始搭建以及开发过程的。

为什么要用 spring boot？
    配置简单
    独立运行
    自动装配
    无代码生成和 xml 配置
    提供应用监控
    易上手
    提升开发效率

spring boot核心配置文件是什么？
    spring boot核心的两个配置文件：
        bootstrap (. yml 或者 . properties)：boostrap 由父 ApplicationContext 加载的，比 application 优先加载，且 boostrap 里面的属性不能被覆盖；
        application (. yml 或者 . properties)：用于 spring boot 项目的自动化配置

spring boot 有哪些方式可以实现热部署？
    使用 devtools 启动热部署，添加 devtools 库，在配置文件中把 spring. devtools. restart. enabled 设置为 true；
    使用 Intellij Idea 编辑器，勾上自动编译或手动重新编译。

jpa 和 hibernate 有什么区别？
    jpa 全称 Java Persistence API，是 Java 持久化接口规范，hibernate 属于 jpa 的具体实现。


======================================================Spring Cloud======================================================


什么是 spring cloud？
    spring cloud 是一系列框架的有序集合。它利用 spring boot 的开发便利性巧妙地简化了分布式系统基础设施的开发，
    如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用 spring boot 的开发风格做到一键启动和部署。

spring cloud 的核心组件有哪些？
    Eureka：服务注册于发现。
    Feign：基于动态代理机制，根据注解和选择的机器，拼接请求 url 地址，发起请求。
    Ribbon：实现负载均衡，从一个服务的多台机器中选择一台。
    Hystrix：提供线程池，不同的服务走不同的线程池，实现了不同服务调用的隔离，避免了服务雪崩的问题。
    Zuul：网关管理，由 Zuul 网关转发请求给对应的服务。

spring cloud Alibaba 的核心组件有哪些？
    Sentinel: 把流量作为切入点, 从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。
    Nacos: 一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。
    Seata: 阿里巴巴开源产品, 一个易于使用的高性能微服务分布式事务解决方案
    GetWay: 网关
    Openfeign: 远程调用

spring cloud 断路器的作用是什么？
    在分布式架构中，断路器模式的作用也是类似的，当某个服务单元发生故障（类似用电器发生短路）之后，通过断路器的故障监控（类似熔断保险丝），
    向调用方返回一个错误响应，而不是长时间的等待。这样就不会使得线程因调用故障服务被长时间占用不释放，避免了故障在分布式系统中的蔓延


======================================================Mybatis======================================================


MyBatis 和 hibernate 的区别有哪些？
    灵活性：MyBatis 更加灵活，自己可以写 SQL 语句，使用起来比较方便。
    可移植性：MyBatis 有很多自己写的 SQL，因为每个数据库的 SQL 可以不相同，所以可移植性比较差。
    学习和使用门槛：MyBatis 入门比较简单，使用门槛也更低。
    二级缓存：hibernate 拥有更好的二级缓存，它的二级缓存可以自行更换为第三方的二级缓存

MyBatis 中 #{}和 ${}的区别是什么？
    #{}是预编译处理，${}是字符替换。在使用 #{}时，MyBatis会将 SQL 中的 #{}替换成“?”，
    配合 PreparedStatement 的 set 方法赋值，这样可以有效的防止 SQL 注入，保证程序的运行安全。

MyBatis 有几种分页方式？
    分页方式：逻辑分页和物理分页。
    逻辑分页：使用 MyBatis 自带的 RowBounds 进行分页，它是一次性查询很多数据，然后在数据中再进行检索。
    物理分页：自己手写 SQL 分页或使用分页插件 PageHelper，去数据库查询指定条数的分页数据的形式。

RowBounds(Mybatis的分页) 是一次性查询全部结果吗？为什么？
    RowBounds表面是在“所有”数据中检索数据，其实并非是一次性查询出所有数据，因为 MyBatis 是对 jdbc 的封装，在 jdbc 驱动中有一个 Fetch Size 的配置，
    它规定了每次最多从数据库查询多少条数据，假如你要查询更多数据，它会在你执行 next()的时候，去查询更多的数据。就好比你去自动取款机取 10000 元，
    但取款机每次最多能取 2500 元，所以你要取 4 次才能把钱取完。只是对于 jdbc 来说，当你调用 next()的时候会自动帮你完成查询工作。这样做的好处可以有效的防止内存溢出。

MyBatis 逻辑分页和物理分页的区别是什么？
    逻辑分页是一次性查询很多数据，然后再在结果中检索分页的数据。这样做弊端是需要消耗大量的内存、有内存溢出的风险、对数据库压力较大。
    物理分页是从数据库查询指定条数的数据，弥补了一次性全部查出的所有数据的种种缺点，比如需要大量的内存，对数据库查询压力较大等问题。

MyBatis 是否支持延迟加载？延迟加载的原理是什么？
    MyBatis 支持延迟加载，设置 lazyLoadingEnabled=true 即可。
    延迟加载的原理的是调用的时候触发加载，而不是在初始化的时候就加载信息。比如调用 a. getB(). getName()，这个时候发现 a. getB() 的值为 null，
    此时会单独触发事先保存好的关联 B 对象的 SQL，先查询出来 B，然后再调用 a. setB(b)，而这时候再调用 a. getB(). getName() 就有值了，这就是延迟加载的基本原理。

说一下 MyBatis 的一级缓存和二级缓存？
    一级缓存：基于 PerpetualCache 的 HashMap 本地缓存，它的声明周期是和 SQLSession 一致的，有多个 SQLSession 或者分布式的环境中数据库操作，可能会出现脏数据。
        当 Session flush 或 close 之后，该 Session 中的所有 Cache 就将清空，默认一级缓存是开启的。

    二级缓存：也是基于 PerpetualCache 的 HashMap 本地缓存，不同在于其存储作用域为 Mapper 级别的，如果多个SQLSession之间需要共享缓存，则需要使用到二级缓存，
        并且二级缓存可自定义存储源，如 Ehcache。默认不打开二级缓存，要开启二级缓存，使用二级缓存属性类需要实现 Serializable 序列化接口(可用来保存对象的状态)。

    开启二级缓存数据查询流程：二级缓存 -> 一级缓存 -> 数据库。
    缓存更新机制：当某一个作用域(一级缓存 Session/二级缓存 Mapper)进行了C/U/D 操作后，默认该作用域下所有 select 中的缓存将被 clear。


MyBatis 有哪些执行器（Executor）？
    MyBatis 有三种基本的Executor执行器：
        SimpleExecutor：每执行一次 update 或 select 就开启一个 Statement 对象，用完立刻关闭 Statement 对象；

        ReuseExecutor：执行 update 或 select，以 SQL 作为 key 查找 Statement 对象，存在就使用，不存在就创建，
            用完后不关闭 Statement 对象，而是放置于 Map 内供下一次使用。简言之，就是重复使用 Statement 对象；

        BatchExecutor：执行 update（没有 select，jdbc 批处理不支持 select），将所有 SQL 都添加到批处理中（addBatch()），等待统一执行（executeBatch()），
            它缓存了多个 Statement 对象，每个 Statement 对象都是 addBatch()完毕后，等待逐一执行 executeBatch()批处理，与 jdbc 批处理相同。


MyBatis 分页插件的实现原理是什么？
    分页插件的基本原理是使用 MyBatis 提供的插件接口，实现自定义插件，在插件的拦截方法内拦截待执行的 SQL，然后重写 SQL，根据 dialect 方言，添加对应的物理分页语句和物理分页参数。


MyBatis 如何编写一个自定义插件？
    自定义插件实现原理
    MyBatis 自定义插件针对 MyBatis 四大对象（Executor、StatementHandler、ParameterHandler、ResultSetHandler）进行拦截：
        Executor：拦截内部执行器，它负责调用 StatementHandler 操作数据库，并把结果集通过 ResultSetHandler 进行自动映射，另外它还处理了二级缓存的操作；
        StatementHandler：拦截 SQL 语法构建的处理，它是 MyBatis 直接和数据库执行 SQL 脚本的对象，另外它也实现了 MyBatis 的一级缓存；
        ParameterHandler：拦截参数的处理；
        ResultSetHandler：拦截结果集的处理。

    自定义插件实现关键
    MyBatis 插件要实现 Interceptor 接口，接口包含的方法，如下：
        public interface Interceptor {
           Object intercept(Invocation invocation) throws Throwable;
           Object plugin(Object target);
           void setProperties(Properties properties);
        }
        intercept 方法就是要进行拦截的时候要执行的方法。
        setProperties 方法是在 MyBatis 进行配置插件的时候可以配置自定义相关属性，即：接口实现对象的参数配置；
        plugin 方法是插件用于封装目标对象的，通过该方法我们可以返回目标对象本身，也可以返回一个它的代理，
            可以决定是否要进行拦截进而决定要返回一个什么样的目标对象，官方提供了示例：return Plugin. wrap(target, this)；

    自定义插件实现示例
    官方插件实现：
    @Intercepts({@Signature(type = Executor.class, method = "query",
            args = {MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class})})
    public class TestInterceptor implements Interceptor {
        public Object intercept(Invocation invocation) throws Throwable {
            Object target = invocation. getTarget();    被代理对象
            Method method = invocation. getMethod();    代理方法
            Object[] args = invocation. getArgs();      方法参数
            // do something . . . . . .  方法拦截前执行代码块
            Object result = invocation. proceed();
            // do something . . . . . . . 方法拦截后执行代码块
            return result;
        }
        public Object plugin(Object target) {
            return Plugin. wrap(target, this);
        }
    }












